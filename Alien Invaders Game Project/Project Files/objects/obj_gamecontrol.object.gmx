<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set win, pause, and enemies variables

// set hit points to 1 needed by all objects to avoid errors from bombs
//exploding and detecting collisions. 
hp = 1;

//used when level is cleared to indicate that player has won
win = 0;  

//pause
paused = false; 



//resest enemies global variable so that any enemies count that may carry over from previous 
//room or menu doens't mess with the win detection. This occurs when player is destroyed
// without killing all enemies, and then the level is reset. 
global.enemies = 0; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to the transition room or main menu
//if a next room exists, then go to the transition room,
// else go to the menu
if room_next(room) != -1
    {
    room_goto(rm_transition);
    }
    
else 
    {
    //Add current score to the highscore checker
    highscore_add("", score); 
    
    //open the savedata.ini file and add the total kills count to the saved amount
    ini_open("savedata.ini");
    ini_write_real("stats", "totalkills", global.totalkills); 
    ini_close();
       
    //goto the main menu
    room_goto(rm_menu);
    
    } 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Power Ups &amp; Level Clear &amp; Game Over

/////////////////////Doubel Laser Power-up///////////////////////////////
//Check if global variable for double laser score has reached 10000,
// if so, then create the Double Laser Power up Object and reset the score
if global.doublelaser_score &gt;= 10000
    {
    instance_create(308, 350, obj_DoubleLaser);
    global.doublelaser_score = 0;
    }

//////////////////Shield Power Up//////////////////////
//If the total killed is 50 or 100, I.E. every 50 kills since the killed variable is 
//reset by the extra life power up after 100 kills. Then create a extra shield powerup, if 
//a power up object does not already exist
        
if global.killed == 50 || global.killed == 100
    {
        if !instance_exists(obj_ExtraShield)
            {
            instance_create(332, 350, obj_ExtraShield);
            //increment the killed global, otherwise if the player hits the power up, but does not destroy an enemy
            //the power up will just be continously created
            global.killed++;  
            }        
    }    
    
//////////////////Spread Laser Power-up///////////////////////////    
//Check if global variable for spread laser score has reached 15000,
// if so,  then creat the Spread Laser Power up object and reset the score
if global.spreadlaser_score &gt;= 15000
    {
    instance_create(random_range(0, 640), -20, obj_SpreadLaser);
    global.spreadlaser_score = 0; 
    }

/////////////Extra Life Power up//////////////////////////    
//Check if the global killed variable has reached 200, if it has then generate 
//an extra life power and reset to 0.     
if global.killed &gt;= 200
    {
    instance_create(340, 0, obj_ExtraLife); 
    global.killed = 0;
    }


    
    
    
////////////////////Level Clear///////////////
//If the enemies variable has reached 0, then it means the player has won this level
// so set the win variable to 1. 

if global.enemies &lt;= 0 &amp;&amp; win == 0
    {
    win = 1;
    }
    
//if the player has won, then set the alarm to change rooms to 1.5 second, and set the win variable
// to 2, so neither this or the statement above is triggered again
if win == 1
    {
    alarm_set(0, 45);
    //Set the level to the next room id
    global.level = room_next(room);
    instance_create(0, 0, obj_fade);    
    win = 2; 
    }
    



    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw stats overlays 

//Draw the item bar
draw_sprite(spr_bar, 1, 0, 0); 

//draw score
draw_set_font(fnt_score);
draw_text_colour(510, 7, string(score), c_white, c_white, c_white, c_white, 1); 

//draw lives
//xGap = half of the width of the ship sprite
xGap = 24; 
//draw a sprite for each life the player has
for (i = 0; i &lt; lives; i++;)
    {
    draw_sprite_stretched(spr_ship, 0, xGap + 60, 7, 18, 20);
    xGap += 20;
    }


//Draw Power Ups///////////////////////////
draw_set_font(fnt_powerups);

//Double Laser
draw_sprite_stretched(spr_DoubleLaser, 0, 10, 438, 12, 12);  
draw_text_colour(23, 438, string(global.doublelaser), c_lime, c_lime, c_lime, c_lime, 1);

//Spread Laser
draw_sprite_stretched(spr_SpreadLaser, 0, 10, 452, 12, 12); 
draw_text_colour(23, 452, string(global.spreadlaser), c_lime, c_lime, c_lime, c_lime, 1);

//Bombs
draw_sprite_stretched(spr_ExtraBomb, 0, 10, 466, 12, 12); 
draw_text_colour(23, 466, string(global.bombs), c_lime, c_lime, c_lime, c_lime, 1);
/////////////////////////////////////////////////////////



//////////////////////////////Pause//////////////////////////
if paused
    {  
    draw_set_alpha(0.5);
    draw_rectangle_colour(0, 0, room_width, room_height, c_black, c_black, c_black, c_black, false);
    draw_set_alpha(1);
    draw_sprite(spr_paused, 0, 320, 240); 
    }
    




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause
paused = !paused; 

if paused
    {
    instance_deactivate_all(true);
    
    }
else
    {
    instance_activate_all();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
